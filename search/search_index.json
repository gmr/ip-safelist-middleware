{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IP Safelist Middleware","text":"<p>FastAPI Middleware for IP Address Safelisting. This middleware allows you to restrict access to your FastAPI application based on client IP addresses.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udee1\ufe0f IP address filtering based on exact match or network ranges (CIDR notation)</li> <li>\ud83c\udf10 AWS IP ranges support from specified regions</li> <li>\ud83c\udfaf Path-based access control using regex patterns</li> <li>\ud83d\udd13 Unrestricted access for public endpoints using <code>allow</code> type</li> <li>\u2699\ufe0f Environment variable configuration with pydantic-settings</li> <li>\ud83d\udd27 Customizable HTTP status code and message for blocked requests</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pip install ip-safelist-middleware\n</code></pre> <pre><code>from fastapi import FastAPI\nfrom ip_safelist_middleware import IPSafeListMiddleware, ListItem, ListType\n\napp = FastAPI()\n\n# Basic IP filtering\napp.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        ListItem(path=r'^/api/.*$', type=ListType.env),\n    ]\n)\n</code></pre> <p>Set allowed IPs via environment variable: <pre><code>export IP_SAFELIST_NETWORKS=\"127.0.0.1,192.168.0.0/24,10.0.0.0/8\"\n</code></pre></p>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li>API Security: Restrict API access to specific IP ranges</li> <li>Admin Panels: Limit administrative interfaces to internal networks</li> <li>Development/Staging: Control access to non-production environments</li> <li>Compliance: Meet security requirements for IP-based access control</li> <li>Load Balancer Health Checks: Allow unrestricted access to health endpoints</li> </ul>"},{"location":"#why-ip-safelist-middleware","title":"Why IP Safelist Middleware?","text":"<p>While IP-based filtering shouldn't be your only security layer, it provides an important first line of defense by:</p> <ul> <li>Reducing attack surface by blocking unwanted traffic at the application level</li> <li>Providing simple access control for internal tools and APIs</li> <li>Supporting both static IP lists and dynamic AWS IP ranges</li> <li>Offering flexible path-based rules for different endpoint requirements</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started - Detailed setup instructions</li> <li>Configuration - Environment variables and options</li> <li>Examples - Real-world usage patterns</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"api-reference/","title":"API Reference","text":"<p>Complete API documentation for the IP Safelist Middleware.</p>"},{"location":"api-reference/#ipsafelistmiddleware","title":"IPSafeListMiddleware","text":""},{"location":"api-reference/#ip_safelist_middleware.IPSafeListMiddleware","title":"<code>ip_safelist_middleware.IPSafeListMiddleware</code>","text":"Source code in <code>ip_safelist_middleware/middleware.py</code> <pre><code>class IPSafeListMiddleware:\n    def __init__(\n        self,\n        app: types.ASGIApp,\n        list_items: list[models.ListItem] | None = None,\n        aws_enabled: bool | None = None,\n        aws_regions: list[str] | None = None,\n        networks: set[str] | str | None = None,\n        status_code: int | None = None,\n        status_message: str | None = None,\n    ) -&gt; None:\n        self._settings = _Settings()\n        if isinstance(networks, str):\n            networks = {networks}\n        for key, value in {\n            'aws_enabled': aws_enabled,\n            'aws_regions': aws_regions,\n            'networks': {\n                value\n                for value in {self._convert_to_network(network) for network in networks}\n                if value\n            }\n            if networks\n            else networks,\n            'status_code': status_code,\n            'status_message': status_message,\n        }.items():\n            if value is not None:\n                self._settings.__setattr__(key, value)\n        LOGGER.debug('Settings %r', self._settings.model_dump())\n        self.app = app\n\n        if not list_items:  # Default behavior if no list items passed\n            list_items = [models.ListItem(path=r'^/.*$', type=models.ListType.env)]\n\n        self._items = list_items\n        if self._settings.aws_enabled:\n            self._aws_list = self._load_from_amazon()\n        else:\n            self._aws_list = set()\n        self._env_list = self._load_from_environment()\n\n    async def __call__(\n        self, scope: types.Scope, receive: types.Receive, send: types.Send\n    ) -&gt; None:\n        \"\"\"Validate the Client IP is in the Safelist\"\"\"\n        if scope['type'] != 'http':  # pragma: nocover\n            return await self.app(scope, receive, send)\n        client_ip = self._get_request_address(scope['client'][0])\n        if client_ip:\n            for item in self._items:\n                if item.regex.search(scope['path']) and self._is_in_safe_list(\n                    item, client_ip\n                ):\n                    return await self.app(scope, receive, send)\n\n        LOGGER.debug('Returning %s to %s', self._settings.status_code, client_ip)\n        response = responses.PlainTextResponse(\n            self._settings.status_message, status_code=self._settings.status_code\n        )\n        await response(scope, receive, send)\n\n    @staticmethod\n    def _convert_to_network(value: str) -&gt; IPNetworks | None:\n        try:\n            return ipaddress.ip_network(value)\n        except ValueError as err:\n            LOGGER.error('Error parsing IP network (%s): %s', value, err)\n            return None\n\n    def _is_in_safe_list(self, item: models.ListItem, client_ip: IPAddress) -&gt; bool:\n        \"\"\"Return True if the client IP is in the safe list.\"\"\"\n        safe_list = set()\n        if item.type == models.ListType.allow:\n            return True\n        elif isinstance(item.type, models.ListType):\n            safe_list = self._get_safe_list(item.type)\n        elif isinstance(item.type, list):\n            for item_type in item.type:\n                if item_type == models.ListType.allow:\n                    return True\n                safe_list.update(self._get_safe_list(item_type))\n        for network in safe_list:\n            if client_ip in network:\n                LOGGER.debug('%s is trusted in %s', client_ip, network)\n                return True\n        return False\n\n    def _get_safe_list(self, item_type: models.ListType) -&gt; set[IPNetworks]:\n        \"\"\"Return the safe list based on the type\"\"\"\n        if item_type == models.ListType.aws:\n            return self._aws_list\n        return self._env_list\n\n    @staticmethod\n    def _get_request_address(addr: str) -&gt; IPAddress | None:\n        \"\"\"Return the client IP address as an IPv4Address object.\"\"\"\n        try:\n            return ipaddress.ip_address(addr)\n        except ValueError as err:\n            LOGGER.error('Error parsing IP address (%s): %s', addr, err)\n            return None\n\n    def _load_from_amazon(\n        self, transport: httpx.BaseTransport | None = None\n    ) -&gt; set[IPNetworks]:\n        \"\"\"Load safe list from Amazon IP Ranges.\"\"\"\n        LOGGER.debug(\n            'Loading Safelist IP Ranges from Amazon (%s)', self._settings.aws_regions\n        )\n        start = time.time()\n        networks: set[IPNetworks] = set()\n\n        # Use context manager to ensure client is properly closed\n        with httpx.Client(headers=_HTTP_HEADERS, transport=transport) as client:\n            response = client.get(_AWS_IP_URL)\n            response.raise_for_status()\n            for prefix in response.json()['prefixes']:\n                if prefix['region'] in self._settings.aws_regions:\n                    networks.add(ipaddress.IPv4Network(prefix['ip_prefix']))\n            for prefix in response.json()['ipv6_prefixes']:\n                if prefix['region'] in self._settings.aws_regions:\n                    networks.add(ipaddress.IPv6Network(prefix['ipv6_prefix']))\n\n        LOGGER.debug(\n            'Loaded %i networks in %0.2f seconds', len(networks), time.time() - start\n        )\n        return networks\n\n    def _load_from_environment(self) -&gt; set[IPNetworks]:\n        \"\"\"Load comma delimited safe list from environment variable.\"\"\"\n        LOGGER.debug('ENV Safelist: %r', self._settings.networks)\n        return self._settings.networks or set()\n</code></pre>"},{"location":"api-reference/#ip_safelist_middleware.IPSafeListMiddleware.__call__","title":"<code>__call__(scope, receive, send)</code>  <code>async</code>","text":"<p>Validate the Client IP is in the Safelist</p> Source code in <code>ip_safelist_middleware/middleware.py</code> <pre><code>async def __call__(\n    self, scope: types.Scope, receive: types.Receive, send: types.Send\n) -&gt; None:\n    \"\"\"Validate the Client IP is in the Safelist\"\"\"\n    if scope['type'] != 'http':  # pragma: nocover\n        return await self.app(scope, receive, send)\n    client_ip = self._get_request_address(scope['client'][0])\n    if client_ip:\n        for item in self._items:\n            if item.regex.search(scope['path']) and self._is_in_safe_list(\n                item, client_ip\n            ):\n                return await self.app(scope, receive, send)\n\n    LOGGER.debug('Returning %s to %s', self._settings.status_code, client_ip)\n    response = responses.PlainTextResponse(\n        self._settings.status_message, status_code=self._settings.status_code\n    )\n    await response(scope, receive, send)\n</code></pre>"},{"location":"api-reference/#listitem","title":"ListItem","text":""},{"location":"api-reference/#ip_safelist_middleware.ListItem","title":"<code>ip_safelist_middleware.ListItem</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration entry for a path and the type of list to use</p> Source code in <code>ip_safelist_middleware/models.py</code> <pre><code>class ListItem(pydantic.BaseModel):\n    \"\"\"Configuration entry for a path and the type of list to use\"\"\"\n\n    path: str\n    type: ListType | list[ListType]\n    _compiled: re.Pattern | None = pydantic.PrivateAttr(default=None)\n\n    @property\n    def regex(self) -&gt; re.Pattern:\n        \"\"\"Return a regex pattern for the blocklist entry.\"\"\"\n        if not self._compiled:\n            self._compiled = re.compile(self.path)\n        return self._compiled\n</code></pre>"},{"location":"api-reference/#ip_safelist_middleware.ListItem.regex","title":"<code>regex</code>  <code>property</code>","text":"<p>Return a regex pattern for the blocklist entry.</p>"},{"location":"api-reference/#listtype","title":"ListType","text":""},{"location":"api-reference/#ip_safelist_middleware.ListType","title":"<code>ip_safelist_middleware.ListType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>ip_safelist_middleware/models.py</code> <pre><code>class ListType(enum.Enum):\n    aws = 'aws'\n    env = 'env'\n    allow = 'allow'\n</code></pre>"},{"location":"api-reference/#settings","title":"Settings","text":"<p>The middleware uses internal settings that can be configured via environment variables or constructor parameters. See the Configuration page for details.</p>"},{"location":"api-reference/#exceptions","title":"Exceptions","text":"<p>The middleware may raise standard FastAPI/Starlette HTTP exceptions:</p> <ul> <li><code>HTTPException</code> with status code 403 (or configured status code) when IP is not allowed</li> <li>Various internal exceptions during initialization if configuration is invalid</li> </ul>"},{"location":"api-reference/#usage-examples","title":"Usage Examples","text":""},{"location":"api-reference/#basic-middleware-setup","title":"Basic Middleware Setup","text":"<pre><code>from ip_safelist_middleware import IPSafeListMiddleware, ListItem, ListType\n\n# Simple environment-based filtering\napp.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        ListItem(path=r'^/api/.*$', type=ListType.env)\n    ]\n)\n</code></pre>"},{"location":"api-reference/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code># Complex multi-type configuration\napp.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        ListItem(path=r'^/admin/.*$', type=ListType.env),\n        ListItem(path=r'^/api/.*$', type=[ListType.aws, ListType.env]),\n        ListItem(path=r'^/public/.*$', type=ListType.allow),\n    ],\n    status_code=401,\n    status_message=\"Unauthorized\",\n    aws_enabled=True,\n    aws_regions=[\"us-east-1\", \"us-west-2\"],\n    networks={\"192.168.1.0/24\", \"10.0.0.0/8\"}\n)\n</code></pre>"},{"location":"api-reference/#environment-variables","title":"Environment Variables","text":"<p>All configuration can be provided via environment variables:</p> Variable Type Default Description <code>IP_SAFELIST_NETWORKS</code> str <code>None</code> Comma-separated IP addresses/CIDR blocks <code>IP_SAFELIST_AWS_ENABLED</code> bool <code>False</code> Enable AWS IP range fetching <code>IP_SAFELIST_AWS_REGIONS</code> str <code>\"us-east-1,us-east-2\"</code> Comma-separated AWS regions <code>IP_SAFELIST_STATUS_CODE</code> int <code>403</code> HTTP status code for blocked requests <code>IP_SAFELIST_STATUS_MESSAGE</code> str <code>\"Forbidden\"</code> Response message for blocked requests"},{"location":"api-reference/#type-definitions","title":"Type Definitions","text":""},{"location":"api-reference/#network-types","title":"Network Types","text":"<p>The middleware accepts IP addresses and networks in these formats:</p> <ul> <li>Individual IPv4: <code>192.168.1.1</code></li> <li>Individual IPv6: <code>2001:db8::1</code></li> <li>IPv4 CIDR: <code>192.168.0.0/24</code></li> <li>IPv6 CIDR: <code>2001:db8::/32</code></li> </ul>"},{"location":"api-reference/#path-patterns","title":"Path Patterns","text":"<p>Path patterns use Python regular expressions:</p> <ul> <li><code>^/api/.*$</code> - Matches all paths starting with <code>/api/</code></li> <li><code>^/(?!health).*$</code> - Matches all paths except <code>/health</code></li> <li><code>^/(admin|api)/.*$</code> - Matches paths starting with <code>/admin/</code> or <code>/api/</code></li> </ul>"},{"location":"api-reference/#list-types","title":"List Types","text":""},{"location":"api-reference/#listtypeenv","title":"<code>ListType.env</code>","text":"<p>Uses IP addresses from environment variables or direct configuration.</p>"},{"location":"api-reference/#listtypeaws","title":"<code>ListType.aws</code>","text":"<p>Uses IP ranges from specified AWS regions. Automatically fetches current AWS IP ranges.</p>"},{"location":"api-reference/#listtypeallow","title":"<code>ListType.allow</code>","text":"<p>Bypasses all IP restrictions. When combined with other types, takes precedence.</p>"},{"location":"api-reference/#internal-methods","title":"Internal Methods","text":"<p>Internal API</p> <p>The following methods are internal implementation details and should not be called directly:</p> <ul> <li><code>_load_from_amazon()</code> - Fetches AWS IP ranges</li> <li><code>_get_safe_list()</code> - Retrieves IP ranges for a specific list type</li> <li><code>_is_ip_allowed()</code> - Checks if an IP is in allowed ranges</li> <li><code>_should_check_request()</code> - Determines if request should be filtered</li> </ul>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":"<p>The middleware handles various error conditions gracefully:</p>"},{"location":"api-reference/#configuration-errors","title":"Configuration Errors","text":"<ul> <li>Invalid IP addresses in configuration are logged and ignored</li> <li>Empty configuration results in blocking all requests (fail-safe)</li> <li>Invalid regex patterns raise <code>ValueError</code> during initialization</li> </ul>"},{"location":"api-reference/#runtime-errors","title":"Runtime Errors","text":"<ul> <li>Missing client IP information defaults to blocking the request</li> <li>AWS IP range fetch failures fall back to environment configuration</li> <li>Network parsing errors are logged but don't crash the application</li> </ul>"},{"location":"api-reference/#http-responses","title":"HTTP Responses","text":"<p>Blocked requests receive: <pre><code>{\n  \"detail\": \"Forbidden\"  // or configured status_message\n}\n</code></pre></p> <p>With HTTP status code 403 (or configured status_code).</p>"},{"location":"api-reference/#performance-notes","title":"Performance Notes","text":"<ul> <li>Initialization: IP ranges are processed and cached at startup</li> <li>Request Processing: Uses efficient set-based IP membership testing</li> <li>AWS Ranges: Cached for 24 hours with automatic refresh</li> <li>Regex Matching: Path patterns compiled once at startup</li> </ul>"},{"location":"api-reference/#thread-safety","title":"Thread Safety","text":"<p>The middleware is thread-safe and can be used in multi-threaded ASGI servers like Uvicorn with multiple workers.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#120","title":"[1.2.0]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>An <code>allow</code> list type for public access to a specific path</li> <li>Comprehensive documentation site using MkDocs Material</li> <li>API reference documentation with mkdocstrings</li> <li>Real-world usage examples</li> <li>Configuration guide with deployment examples</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Improved README with better structure and examples</li> <li>Enhanced type hints throughout codebase</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>All pre-commit hook violations</li> <li>Missing return type annotations</li> </ul>"},{"location":"changelog/#previous-releases","title":"[Previous Releases]","text":"<p>For information about previous releases, please check the GitHub releases page.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>The middleware can be configured using environment variables for easy deployment and configuration management.</p>"},{"location":"configuration/#ip-networks-configuration","title":"IP Networks Configuration","text":"Variable Description Default Example <code>IP_SAFELIST_NETWORKS</code> Comma-separated list of IP addresses or CIDR blocks <code>None</code> <code>\"127.0.0.1,192.168.0.0/24,10.0.0.0/8\"</code>"},{"location":"configuration/#aws-configuration","title":"AWS Configuration","text":"Variable Description Default Example <code>IP_SAFELIST_AWS_ENABLED</code> Enable/disable AWS IP ranges <code>False</code> <code>\"true\"</code> <code>IP_SAFELIST_AWS_REGIONS</code> Comma-separated list of AWS regions <code>\"us-east-1,us-east-2\"</code> <code>\"us-west-1,eu-west-1\"</code>"},{"location":"configuration/#response-configuration","title":"Response Configuration","text":"Variable Description Default Example <code>IP_SAFELIST_STATUS_CODE</code> HTTP status code for blocked requests <code>403</code> <code>\"401\"</code> <code>IP_SAFELIST_STATUS_MESSAGE</code> Message returned for blocked requests <code>\"Forbidden\"</code> <code>\"Access denied\"</code>"},{"location":"configuration/#programmatic-configuration","title":"Programmatic Configuration","text":""},{"location":"configuration/#basic-setup","title":"Basic Setup","text":"<pre><code>from ip_safelist_middleware import IPSafeListMiddleware, ListItem, ListType\n\napp.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        ListItem(path=r'^/api/.*$', type=ListType.env),\n    ],\n    # Override defaults\n    status_code=401,\n    status_message=\"Unauthorized access\",\n    # Direct IP configuration (bypasses environment variables)\n    networks={\"192.168.1.0/24\", \"10.0.0.0/8\"},\n    # AWS configuration\n    aws_enabled=True,\n    aws_regions=[\"us-east-1\", \"us-west-2\"]\n)\n</code></pre>"},{"location":"configuration/#multiple-list-items","title":"Multiple List Items","text":"<p>Configure different rules for different paths:</p> <pre><code>app.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        # Admin requires AWS IPs\n        ListItem(path=r'^/admin/.*$', type=ListType.aws),\n\n        # API requires environment IPs\n        ListItem(path=r'^/api/.*$', type=ListType.env),\n\n        # Public endpoints allow all\n        ListItem(path=r'^/public/.*$', type=ListType.allow),\n\n        # Health checks from environment IPs only\n        ListItem(path=r'^/health.*$', type=ListType.env),\n    ]\n)\n</code></pre>"},{"location":"configuration/#combined-list-types","title":"Combined List Types","text":"<p>Mix different allowlist types for a single path:</p> <pre><code>ListItem(\n    path=r'^/api/.*$',\n    type=[ListType.aws, ListType.env]  # Allow both AWS and environment IPs\n)\n</code></pre> <p>Allow Type Precedence</p> <p>When <code>ListType.allow</code> is combined with other types, it takes precedence and grants unrestricted access.</p>"},{"location":"configuration/#list-types","title":"List Types","text":""},{"location":"configuration/#listtypeenv","title":"<code>ListType.env</code>","text":"<p>Uses IP addresses from environment variables or programmatic configuration.</p> <pre><code># Via environment\nexport IP_SAFELIST_NETWORKS=\"192.168.1.0/24,10.0.0.1\"\n\n# Via code\nnetworks={\"192.168.1.0/24\", \"10.0.0.1\"}\n</code></pre>"},{"location":"configuration/#listtypeaws","title":"<code>ListType.aws</code>","text":"<p>Uses IP ranges from AWS regions. Automatically fetches and caches AWS IP ranges.</p> <pre><code># Via environment\nexport IP_SAFELIST_AWS_ENABLED=true\nexport IP_SAFELIST_AWS_REGIONS=\"us-east-1,us-west-2\"\n\n# Via code\naws_enabled=True\naws_regions=[\"us-east-1\", \"us-west-2\"]\n</code></pre>"},{"location":"configuration/#listtypeallow","title":"<code>ListType.allow</code>","text":"<p>Bypasses all IP restrictions for matched paths.</p> <pre><code>ListItem(path=r'^/public/.*$', type=ListType.allow)\n</code></pre>"},{"location":"configuration/#advanced-path-patterns","title":"Advanced Path Patterns","text":""},{"location":"configuration/#excluding-specific-paths","title":"Excluding Specific Paths","text":"<p>Use negative lookahead to exclude paths from filtering:</p> <pre><code># Apply to all paths except /health and /metrics\nListItem(path=r'^/(?!health|metrics).*$', type=ListType.env)\n</code></pre>"},{"location":"configuration/#multiple-exclusions","title":"Multiple Exclusions","text":"<pre><code># Exclude multiple health-check style endpoints\nListItem(path=r'^/(?!health|ready|live|metrics).*$', type=ListType.env)\n</code></pre>"},{"location":"configuration/#path-priorities","title":"Path Priorities","text":"<p>The middleware processes list items in order. More specific patterns should come first:</p> <pre><code>list_items=[\n    # Specific pattern first\n    ListItem(path=r'^/api/public/.*$', type=ListType.allow),\n\n    # General pattern second\n    ListItem(path=r'^/api/.*$', type=ListType.env),\n]\n</code></pre>"},{"location":"configuration/#ip-address-formats","title":"IP Address Formats","text":""},{"location":"configuration/#individual-ips","title":"Individual IPs","text":"<pre><code>export IP_SAFELIST_NETWORKS=\"192.168.1.1,10.0.0.1,172.16.0.1\"\n</code></pre>"},{"location":"configuration/#cidr-blocks","title":"CIDR Blocks","text":"<pre><code>export IP_SAFELIST_NETWORKS=\"192.168.0.0/24,10.0.0.0/8,172.16.0.0/12\"\n</code></pre>"},{"location":"configuration/#mixed-format","title":"Mixed Format","text":"<pre><code>export IP_SAFELIST_NETWORKS=\"127.0.0.1,192.168.0.0/24,10.1.1.1\"\n</code></pre>"},{"location":"configuration/#ipv6-support","title":"IPv6 Support","text":"<pre><code>export IP_SAFELIST_NETWORKS=\"::1,2001:db8::/32\"\n</code></pre>"},{"location":"configuration/#error-handling","title":"Error Handling","text":"<p>The middleware gracefully handles configuration errors:</p> <ul> <li>Invalid IP addresses: Logs warning and skips invalid entries</li> <li>AWS fetch failures: Falls back to environment IPs if available</li> <li>Empty configuration: Blocks all requests (fail-safe)</li> </ul>"},{"location":"configuration/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>AWS IP ranges: Cached for 24 hours to minimize API calls</li> <li>IP matching: Uses efficient set-based lookups</li> <li>Regex compilation: Patterns are compiled once at startup</li> </ul>"},{"location":"configuration/#deployment-examples","title":"Deployment Examples","text":""},{"location":"configuration/#docker-environment","title":"Docker Environment","text":"<pre><code>ENV IP_SAFELIST_NETWORKS=\"10.0.0.0/8,172.16.0.0/12\"\nENV IP_SAFELIST_STATUS_CODE=\"401\"\nENV IP_SAFELIST_STATUS_MESSAGE=\"Unauthorized\"\n</code></pre>"},{"location":"configuration/#kubernetes-configmap","title":"Kubernetes ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\ndata:\n  IP_SAFELIST_NETWORKS: \"10.244.0.0/16,10.96.0.0/12\"\n  IP_SAFELIST_AWS_ENABLED: \"true\"\n  IP_SAFELIST_AWS_REGIONS: \"us-west-2\"\n</code></pre>"},{"location":"configuration/#aws-lambda-environment","title":"AWS Lambda Environment","text":"<pre><code>import os\nos.environ['IP_SAFELIST_AWS_ENABLED'] = 'true'\nos.environ['IP_SAFELIST_AWS_REGIONS'] = 'us-east-1'\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>This page contains real-world examples showing how to use IP Safelist Middleware in different scenarios.</p>"},{"location":"examples/#basic-api-protection","title":"Basic API Protection","text":"<p>Protect your API endpoints while keeping health checks accessible:</p> <pre><code>from fastapi import FastAPI, Request\nfrom ip_safelist_middleware import IPSafeListMiddleware, ListItem, ListType\n\napp = FastAPI()\n\n# Protect all API endpoints, but allow health checks from anywhere\napp.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        # API endpoints require approved IPs\n        ListItem(path=r'^/api/.*$', type=ListType.env),\n        # Health endpoint allows any IP\n        ListItem(path=r'^/health$', type=ListType.allow),\n    ]\n)\n\n@app.get(\"/api/users\")\nasync def get_users():\n    return {\"users\": [\"alice\", \"bob\"]}\n\n@app.get(\"/health\")\nasync def health_check():\n    return {\"status\": \"healthy\"}\n</code></pre> <p>Environment configuration: <pre><code>export IP_SAFELIST_NETWORKS=\"192.168.1.0/24,10.0.0.0/8\"\n</code></pre></p>"},{"location":"examples/#multi-tier-security","title":"Multi-Tier Security","text":"<p>Different security levels for different parts of your application:</p> <pre><code>app.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        # Admin panel - most restrictive (specific IPs only)\n        ListItem(path=r'^/admin/.*$', type=ListType.env),\n\n        # Internal API - AWS IPs (for microservices)\n        ListItem(path=r'^/api/internal/.*$', type=ListType.aws),\n\n        # Public API - wider IP range\n        ListItem(path=r'^/api/public/.*$', type=ListType.env),\n\n        # Documentation - unrestricted\n        ListItem(path=r'^/docs.*$', type=ListType.allow),\n        ListItem(path=r'^/redoc.*$', type=ListType.allow),\n\n        # Monitoring endpoints - specific IPs\n        ListItem(path=r'^/metrics$', type=ListType.env),\n    ],\n    status_code=401,\n    status_message=\"Access denied\"\n)\n</code></pre> <p>Environment configuration: <pre><code># Admin and monitoring IPs (very restrictive)\nexport IP_SAFELIST_NETWORKS=\"192.168.1.100,192.168.1.101,10.0.1.0/24\"\n\n# AWS regions for internal services\nexport IP_SAFELIST_AWS_ENABLED=true\nexport IP_SAFELIST_AWS_REGIONS=\"us-east-1,us-west-2\"\n</code></pre></p>"},{"location":"examples/#development-vs-production","title":"Development vs Production","text":"<p>Conditional configuration based on environment:</p> <pre><code>import os\nfrom fastapi import FastAPI\nfrom ip_safelist_middleware import IPSafeListMiddleware, ListItem, ListType\n\napp = FastAPI()\n\n# Different rules for different environments\nif os.getenv(\"ENVIRONMENT\") == \"production\":\n    # Production: strict IP filtering\n    list_items = [\n        ListItem(path=r'^/admin/.*$', type=ListType.env),\n        ListItem(path=r'^/api/.*$', type=[ListType.aws, ListType.env]),\n        ListItem(path=r'^/health$', type=ListType.allow),\n    ]\n    networks = {\"10.0.0.0/8\", \"172.16.0.0/12\"}\n\nelif os.getenv(\"ENVIRONMENT\") == \"staging\":\n    # Staging: moderate filtering\n    list_items = [\n        ListItem(path=r'^/(?!docs|health).*$', type=ListType.env),\n    ]\n    networks = {\"192.168.0.0/16\", \"10.0.0.0/8\"}\n\nelse:\n    # Development: minimal filtering\n    list_items = [\n        ListItem(path=r'^/admin/.*$', type=ListType.env),\n        ListItem(path=r'^/.*$', type=ListType.allow),  # Allow everything else\n    ]\n    networks = {\"127.0.0.1\", \"192.168.0.0/16\"}\n\napp.add_middleware(\n    IPSafeListMiddleware,\n    list_items=list_items,\n    networks=networks,\n    aws_enabled=os.getenv(\"ENVIRONMENT\") == \"production\",\n    aws_regions=[\"us-east-1\"] if os.getenv(\"ENVIRONMENT\") == \"production\" else []\n)\n</code></pre>"},{"location":"examples/#microservices-architecture","title":"Microservices Architecture","text":"<p>Service-to-service communication in a microservices setup:</p> <pre><code># User Service\napp.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        # Public user registration/login\n        ListItem(path=r'^/api/auth/.*$', type=ListType.allow),\n\n        # Internal service calls (from other microservices)\n        ListItem(path=r'^/api/internal/.*$', type=ListType.aws),\n\n        # Admin operations\n        ListItem(path=r'^/api/admin/.*$', type=ListType.env),\n\n        # Public user profile (with rate limiting elsewhere)\n        ListItem(path=r'^/api/users/profile/.*$', type=ListType.allow),\n    ]\n)\n</code></pre> <pre><code># Order Service\napp.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        # Only internal services can access orders\n        ListItem(path=r'^/api/orders/.*$', type=ListType.aws),\n\n        # Health checks for load balancer\n        ListItem(path=r'^/health$', type=ListType.allow),\n\n        # Metrics for monitoring\n        ListItem(path=r'^/metrics$', type=ListType.env),\n    ]\n)\n</code></pre>"},{"location":"examples/#load-balancer-integration","title":"Load Balancer Integration","text":"<p>Working with load balancers and reverse proxies:</p> <pre><code>from fastapi import FastAPI, Request\nfrom ip_safelist_middleware import IPSafeListMiddleware, ListItem, ListType\n\napp = FastAPI()\n\n@app.middleware(\"http\")\nasync def get_real_ip(request: Request, call_next):\n    \"\"\"Extract real IP from load balancer headers\"\"\"\n    real_ip = request.headers.get(\"X-Forwarded-For\", \"\").split(\",\")[0].strip()\n    if real_ip:\n        # Modify the request to use the real IP\n        request.scope[\"client\"] = (real_ip, 0)\n    response = await call_next(request)\n    return response\n\n# Apply IP filtering after real IP extraction\napp.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        # Health checks from load balancer (known IPs)\n        ListItem(path=r'^/health$', type=ListType.env),\n\n        # Admin from office networks\n        ListItem(path=r'^/admin/.*$', type=ListType.env),\n\n        # API from approved sources\n        ListItem(path=r'^/api/.*$', type=ListType.env),\n    ]\n)\n</code></pre> <p>Environment configuration: <pre><code># Include load balancer IPs and approved client IPs\nexport IP_SAFELIST_NETWORKS=\"10.0.1.100,10.0.1.101,192.168.0.0/24,203.0.113.0/24\"\n</code></pre></p>"},{"location":"examples/#custom-error-responses","title":"Custom Error Responses","text":"<p>Provide helpful error responses for blocked requests:</p> <pre><code>from fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import JSONResponse\nfrom ip_safelist_middleware import IPSafeListMiddleware, ListItem, ListType\n\napp = FastAPI()\n\napp.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        ListItem(path=r'^/api/.*$', type=ListType.env),\n    ],\n    status_code=403,\n    status_message=\"Access denied: Your IP address is not authorized\"\n)\n\n@app.exception_handler(403)\nasync def forbidden_handler(request: Request, exc: HTTPException):\n    \"\"\"Custom 403 error response\"\"\"\n    client_ip = request.client.host if request.client else \"Unknown\"\n\n    return JSONResponse(\n        status_code=403,\n        content={\n            \"error\": \"Forbidden\",\n            \"message\": \"Access denied: Your IP address is not authorized\",\n            \"client_ip\": client_ip,\n            \"timestamp\": \"2024-01-01T00:00:00Z\",\n            \"help\": \"Contact support if you believe this is an error\"\n        }\n    )\n</code></pre>"},{"location":"examples/#testing-configuration","title":"Testing Configuration","text":"<p>Example test setup to verify IP filtering works correctly:</p> <pre><code># test_ip_filtering.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom your_app import app\n\ndef test_allowed_ip():\n    \"\"\"Test that allowed IPs can access protected endpoints\"\"\"\n    with TestClient(app) as client:\n        # Simulate request from allowed IP\n        client.client = (\"192.168.1.100\", 50000)\n        response = client.get(\"/api/data\")\n        assert response.status_code == 200\n\ndef test_blocked_ip():\n    \"\"\"Test that blocked IPs cannot access protected endpoints\"\"\"\n    with TestClient(app) as client:\n        # Simulate request from blocked IP\n        client.client = (\"203.0.113.1\", 50000)\n        response = client.get(\"/api/data\")\n        assert response.status_code == 403\n\ndef test_public_endpoint():\n    \"\"\"Test that public endpoints are always accessible\"\"\"\n    with TestClient(app) as client:\n        # Any IP should be able to access public endpoints\n        client.client = (\"203.0.113.1\", 50000)\n        response = client.get(\"/health\")\n        assert response.status_code == 200\n</code></pre>"},{"location":"examples/#container-deployment","title":"Container Deployment","text":""},{"location":"examples/#docker-compose","title":"Docker Compose","text":"<pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  api:\n    build: .\n    environment:\n      - IP_SAFELIST_NETWORKS=10.0.0.0/8,172.16.0.0/12\n      - IP_SAFELIST_AWS_ENABLED=true\n      - IP_SAFELIST_AWS_REGIONS=us-east-1,us-west-2\n      - IP_SAFELIST_STATUS_CODE=401\n    ports:\n      - \"8000:8000\"\n    networks:\n      - app_network\n\nnetworks:\n  app_network:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n</code></pre>"},{"location":"examples/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code># deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-server\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: api-server\n  template:\n    metadata:\n      labels:\n        app: api-server\n    spec:\n      containers:\n      - name: api\n        image: your-api:latest\n        env:\n        - name: IP_SAFELIST_NETWORKS\n          valueFrom:\n            configMapKeyRef:\n              name: ip-config\n              key: allowed-networks\n        - name: IP_SAFELIST_AWS_ENABLED\n          value: \"true\"\n        - name: IP_SAFELIST_AWS_REGIONS\n          value: \"us-west-2\"\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: ip-config\ndata:\n  allowed-networks: \"10.244.0.0/16,10.96.0.0/12\"\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install the middleware using pip:</p> <pre><code>pip install ip-safelist-middleware\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#environment-based-ip-filtering","title":"Environment-Based IP Filtering","text":"<p>The simplest way to get started is using environment variables to define allowed IP addresses:</p> <pre><code>from fastapi import FastAPI\nfrom ip_safelist_middleware import IPSafeListMiddleware, ListItem, ListType\n\napp = FastAPI()\n\n# Apply IP filtering to all API endpoints\napp.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        ListItem(path=r'^/api/.*$', type=ListType.env),\n    ]\n)\n\n@app.get(\"/api/data\")\nasync def get_data():\n    return {\"message\": \"This endpoint is protected by IP filtering\"}\n\n@app.get(\"/health\")\nasync def health_check():\n    return {\"status\": \"ok\"}  # Not protected - no matching pattern\n</code></pre> <p>Set the allowed IP addresses:</p> <pre><code>export IP_SAFELIST_NETWORKS=\"127.0.0.1,192.168.0.0/24,10.0.0.0/8\"\n</code></pre>"},{"location":"getting-started/#aws-ip-ranges","title":"AWS IP Ranges","text":"<p>For applications running on AWS, you can automatically allow traffic from specific AWS regions:</p> <pre><code>app.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        ListItem(path=r'^/admin/.*$', type=ListType.aws),\n    ]\n)\n</code></pre> <p>Configure AWS regions: <pre><code>export IP_SAFELIST_AWS_REGIONS=\"us-east-1,us-west-2\"\nexport IP_SAFELIST_AWS_ENABLED=true\n</code></pre></p>"},{"location":"getting-started/#public-endpoints","title":"Public Endpoints","text":"<p>Use <code>ListType.allow</code> to create endpoints that bypass IP restrictions entirely:</p> <pre><code>app.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        ListItem(path=r'^/api/.*$', type=ListType.env),      # Protected\n        ListItem(path=r'^/public/.*$', type=ListType.allow), # Public\n        ListItem(path=r'^/docs.*$', type=ListType.allow),    # Public docs\n    ]\n)\n</code></pre>"},{"location":"getting-started/#understanding-path-patterns","title":"Understanding Path Patterns","text":"<p>The middleware uses regex patterns to match request paths. Here are some common patterns:</p> Pattern Description Example Matches <code>^/api/.*$</code> All paths starting with <code>/api/</code> <code>/api/users</code>, <code>/api/data/items</code> <code>^/admin/.*$</code> All admin paths <code>/admin/dashboard</code>, <code>/admin/users</code> <code>^/(?!health).*$</code> All paths except <code>/health</code> <code>/api/data</code> (\u2713), <code>/health</code> (\u2717) <code>^/.*$</code> All paths (default) Every endpoint <p>Testing Regex Patterns</p> <p>Use online regex testers like regex101.com to validate your patterns before deployment.</p>"},{"location":"getting-started/#default-behavior","title":"Default Behavior","text":"<p>When no configuration is provided, the middleware:</p> <ul> <li>\u2705 Applies to all paths (<code>^/.*$</code> pattern)</li> <li>\u2705 Uses environment-based IP filtering (<code>ListType.env</code>)</li> <li>\u274c Blocks all requests if no IPs are configured</li> <li>\u274c Returns <code>403 Forbidden</code> for blocked requests</li> </ul> <pre><code># This will block ALL requests unless IP_SAFELIST_NETWORKS is set\napp.add_middleware(IPSafeListMiddleware)\n</code></pre>"},{"location":"getting-started/#error-responses","title":"Error Responses","text":"<p>Customize the response for blocked requests:</p> <pre><code>app.add_middleware(\n    IPSafeListMiddleware,\n    list_items=[\n        ListItem(path=r'^/api/.*$', type=ListType.env),\n    ],\n    status_code=401,\n    status_message=\"Unauthorized: IP not allowed\"\n)\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration - Detailed configuration options</li> <li>Examples - Real-world usage patterns</li> <li>API Reference - Complete API documentation</li> </ul>"}]}